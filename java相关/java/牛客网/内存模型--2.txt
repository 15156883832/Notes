    最初cpu与用户磁盘之间的交互，cpu运行速度越来越快，而磁盘跟不上的读写远远跟不上，因此设计的内存，用户缓冲，用户
IO等待导致了cpu的等待成本,随着cpu的发展，内存的读写速度也远远跟不上cpu的读写速度，cpu厂商在每个cpu上加了高速缓存


CPU ― 高速缓存 ― 内存

同样，CPU的主频不可能无限，提升性能许多个处理器协同工作，多核诞生，每个处理器都有自己的高速缓存，而这些高速缓存有同事共享一块内存，当多个处理器处理同一块内存时，要想保证缓存一致性，就必须遵循一些相关协议。

JAVA的内存以及逻辑模型：

1）内存模型：多线程机制使多个任务同时执行处理，所有线程公用主存，每个线程从main memory(主存）中拷贝数据到各个线程的工作内存)

2）逻辑模型：
一、程序计数器：较小的内存空间，任意时刻一个处理器只会执行一条线程中的指令，因此，线程切换后回复到正确的执行位置，    每个线程都需要一个独立的程序计数器，故这是每个线程私有的内存，这是java虚拟机规范中唯一一个没有规定任何    outofMemoryError情况的区域
二、Java虚拟机栈：为执行java方法服务，也是线程私有的，俗称“栈（stack）内存”，两种异常：（1）线程请求的栈深度大于    虚拟机所允许的深度，抛出StackOverflowError异常，（2）虚拟机栈动态扩展无法申请到足够的内存，抛出    OutOfMenoryError异常
三、本地方法栈：与虚拟机栈所发挥的作用非常相似，为虚拟机使用的native方法(native method:与java环境外交互)服务，StackOverflowError和OutOfMemoryError    异常
四、java堆（Heap）：虚拟机管理中内存最大的一块，是被所有线程共享的一块内存区域，在虚拟机启动时创建，也是垃圾收集管    理器管理的主要区域，也被成为GC堆
五、方法区：线程共享的内存区域存储已被迅疾加载的类信息、常量、静态变量等。
六、运行时常量池：是方法区的一部分
七、直接内存：
java中的内存模型：所有对象的变量都是存在主内存中的，而每个进程的对变量的改变操作是发生在这个进程的工作内存中的，线程之间的变量传递是通过主内存来实现的。
几大特性：
	1）可见性：
		对象A中有一变量i,i存在main memory中，进程1要用到i,则会生成一个i的拷贝，存在这个进程的working 		memory 中，该进程结束后，working memory中的i会被flush到main memory中，当另一个进程读取这个i时会用到最新的的这个i,可见性保持了各个working memory中的i的一致性。使用了这个相同的同步锁的进程，将会重新加载所有的使用到的变量，这样就保证了可见性。可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。对于可见性，Java提供了volatile(易变的)关键字来保证可见性。（synchronized、lock、volatile）
	2) 原子性：只有简单的读取才叫原子性，如x=2，y=x,x++,x+1这四个操作中只有x=2具备原子性，直接将数值2写入x的空间中，其他的都是取了值之后在进行操作，从取出i到将新的i的值写给i之间不能有其他线程对i进行任何操作，相当于一个们，这个进程进去之后上了一把锁，别人进不去，只有等这个进程结果后锁才能开，即同步锁的应用同步锁，避免数据脏读。即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行（只能执行异步操作（如直接赋值））。
	3）有序性：在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。还有就是上下代码执行的先后顺序

要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。xian确。

线程封闭：避免同步的方式不共享变量，就是线程封闭

